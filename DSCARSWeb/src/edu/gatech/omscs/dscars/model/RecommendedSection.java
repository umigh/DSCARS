package edu.gatech.omscs.dscars.model;
// default package
// Generated Mar 28, 2015 1:24:52 PM by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * RecommendedSection generated by hbm2java
 */
@Entity
@Table(name = "RecommendedSection", catalog = "DSCARS")
public class RecommendedSection implements java.io.Serializable {

	private Integer recSectionId;
	private Instructor instructor;
	private Semester semester;
	private RecommendedSchedule recommendedSchedule;
	private Course course;
	private Integer classSize;
	private Integer sectionDemand;
	private Set<RecommendedStudents> recommendedStudentses = new HashSet<RecommendedStudents>(
			0);
	private Set<RecommendedTas> recommendedTases = new HashSet<RecommendedTas>(
			0);

	public RecommendedSection() {
	}

	public RecommendedSection(Instructor instructor, Semester semester,
			RecommendedSchedule recommendedSchedule, Course course) {
		this.instructor = instructor;
		this.semester = semester;
		this.recommendedSchedule = recommendedSchedule;
		this.course = course;
	}

	public RecommendedSection(Instructor instructor, Semester semester,
			RecommendedSchedule recommendedSchedule, Course course,
			Integer classSize, Integer sectionDemand,
			Set<RecommendedStudents> recommendedStudentses,
			Set<RecommendedTas> recommendedTases) {
		this.instructor = instructor;
		this.semester = semester;
		this.recommendedSchedule = recommendedSchedule;
		this.course = course;
		this.classSize = classSize;
		this.sectionDemand = sectionDemand;
		this.recommendedStudentses = recommendedStudentses;
		this.recommendedTases = recommendedTases;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "RecSectionID", unique = true, nullable = false)
	public Integer getRecSectionId() {
		return this.recSectionId;
	}

	public void setRecSectionId(Integer recSectionId) {
		this.recSectionId = recSectionId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "InstructorID", nullable = false)
	public Instructor getInstructor() {
		return this.instructor;
	}

	public void setInstructor(Instructor instructor) {
		this.instructor = instructor;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "SemesterID", nullable = false)
	public Semester getSemester() {
		return this.semester;
	}

	public void setSemester(Semester semester) {
		this.semester = semester;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "RecScheduleID", nullable = false)
	public RecommendedSchedule getRecommendedSchedule() {
		return this.recommendedSchedule;
	}

	public void setRecommendedSchedule(RecommendedSchedule recommendedSchedule) {
		this.recommendedSchedule = recommendedSchedule;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CourseID", nullable = false)
	public Course getCourse() {
		return this.course;
	}

	public void setCourse(Course course) {
		this.course = course;
	}

	@Column(name = "ClassSize")
	public Integer getClassSize() {
		return this.classSize;
	}

	public void setClassSize(Integer classSize) {
		this.classSize = classSize;
	}

	@Column(name = "SectionDemand")
	public Integer getSectionDemand() {
		return this.sectionDemand;
	}

	public void setSectionDemand(Integer sectionDemand) {
		this.sectionDemand = sectionDemand;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "recommendedSection")
	public Set<RecommendedStudents> getRecommendedStudentses() {
		return this.recommendedStudentses;
	}

	public void setRecommendedStudentses(
			Set<RecommendedStudents> recommendedStudentses) {
		this.recommendedStudentses = recommendedStudentses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "recommendedSection")
	public Set<RecommendedTas> getRecommendedTases() {
		return this.recommendedTases;
	}

	public void setRecommendedTases(Set<RecommendedTas> recommendedTases) {
		this.recommendedTases = recommendedTases;
	}

}
