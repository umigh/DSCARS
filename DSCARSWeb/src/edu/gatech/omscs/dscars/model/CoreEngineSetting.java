package edu.gatech.omscs.dscars.model;
import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.Type;

/**
 * PreferredCourseHistory generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "CoreEngineSetting", catalog = "DSCARS")
public class CoreEngineSetting implements java.io.Serializable {
	@Transient
	public static String NEW="New";
	public static String LOCKED="Locked";
	public static String COMPLETE="Complete";
	
	private Integer settingId;
	private User user;
	private int maxClassSizeDefault;
	private int studentsPerInstructor;
	boolean shadow=false;
	Semester activeSemester;
	/**
	 * The following values will be used for  status.
	 * 1. New - used when a core engine setting is created by student or admin.
	 * 2. Locked - Status will be changed to locked when core engine picks up the setting for processing.
	 * Core engine setting cannot be changed when the status is locked.
	 * 3. Complete - Core engine will change the status to complete when it runs the recommendations. 
	 */
	String status=NEW; 
	Date updateDate;

	public CoreEngineSetting() {
	}


	public CoreEngineSetting(int userId, int maxClassSizeDefault,int studentsPerInstructor, int activeSemesterId) {
		super();
		this.user = new User();
		user.setUserId(userId);
		this.maxClassSizeDefault = maxClassSizeDefault;
		this.studentsPerInstructor = studentsPerInstructor;
		this.activeSemester = new Semester(activeSemesterId);
	}


	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "settingId", unique = true, nullable = false)
	public Integer getSettingId() {
		return settingId;
	}

	public void setSettingId(Integer settingId) {
		this.settingId = settingId;
	}
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "ActiveSemesterID", nullable = false, insertable=true,updatable=true)
	public Semester getActiveSemester() {
		return activeSemester;
	}

	public void setActiveSemester(Semester activeSemester) {
		this.activeSemester = activeSemester;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "UserId", nullable = false, insertable=true,updatable=true)
	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Column(name = "MaxClassSizeDefault", nullable = false)
	public int getMaxClassSizeDefault() {
		return maxClassSizeDefault;
	}

	public void setMaxClassSizeDefault(int maxClassSizeDefault) {
		this.maxClassSizeDefault = maxClassSizeDefault;
	}

	@Column(name = "StudentsPerInstructor", nullable = false)
	public int getStudentsPerInstructor() {
		return studentsPerInstructor;
	}

	public void setStudentsPerInstructor(int studentsPerInstructor) {
		this.studentsPerInstructor = studentsPerInstructor;
	}

	@Type(type="yes_no")
	public boolean isShadow() {
		return shadow;
	}

	public void setShadow(boolean shadow) {
		this.shadow = shadow;
	}

	@Column(name = "Status", nullable = false)
	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updateDate", nullable = false, length = 19)
	public Date getUpdateDate() {
		return updateDate;
	}

	public void setUpdateDate(Date updateDate) {
		this.updateDate = updateDate;
	}
	
	@Transient
	public boolean isLocked() {
		if(status!=null && LOCKED.equals(status)) {
			return true;
		}
		else {
			return false;
		}
	}


	
}
