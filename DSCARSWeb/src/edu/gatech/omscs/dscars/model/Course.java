package edu.gatech.omscs.dscars.model;
// default package
// Generated Mar 28, 2015 1:24:52 PM by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Course generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "Course", catalog = "DSCARS")
public class Course implements java.io.Serializable {

	private int courseId;
	private Instructor instructor;
	private String courseName;
	private Set<PchSub> pchSubs = new HashSet<PchSub>(0);
	private Set<CourseCompetency> courseCompetencies = new HashSet<CourseCompetency>(
			0);
	private Set<Section> sections = new HashSet<Section>(0);
	private Set<RecommendedSection> recommendedSections = new HashSet<RecommendedSection>(
			0);
	private Set<StudentCourseHistory> studentCourseHistories = new HashSet<StudentCourseHistory>(
			0);
	private Set<Requisite> requisitesForPreReqCourseId = new HashSet<Requisite>(
			0);
	private Set<Requisite> requisitesForCourseId = new HashSet<Requisite>(0);

	public Course() {
	}

	public Course(int courseId, String courseName) {
		this.courseId = courseId;
		this.courseName = courseName;
	}

	public Course(int courseId, Instructor instructor, String courseName,
			Set<PchSub> pchSubs, Set<CourseCompetency> courseCompetencies,
			Set<Section> sections, Set<RecommendedSection> recommendedSections,
			Set<StudentCourseHistory> studentCourseHistories,
			Set<Requisite> requisitesForPreReqCourseId,
			Set<Requisite> requisitesForCourseId) {
		this.courseId = courseId;
		this.instructor = instructor;
		this.courseName = courseName;
		this.pchSubs = pchSubs;
		this.courseCompetencies = courseCompetencies;
		this.sections = sections;
		this.recommendedSections = recommendedSections;
		this.studentCourseHistories = studentCourseHistories;
		this.requisitesForPreReqCourseId = requisitesForPreReqCourseId;
		this.requisitesForCourseId = requisitesForCourseId;
	}

	@Id
	@Column(name = "CourseID", unique = true, nullable = false)
	public int getCourseId() {
		return this.courseId;
	}

	public void setCourseId(int courseId) {
		this.courseId = courseId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "DefaultInstructorID")
	public Instructor getInstructor() {
		return this.instructor;
	}

	public void setInstructor(Instructor instructor) {
		this.instructor = instructor;
	}

	@Column(name = "CourseName", nullable = false, length = 65535)
	public String getCourseName() {
		return this.courseName;
	}

	public void setCourseName(String courseName) {
		this.courseName = courseName;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "course")
	public Set<PchSub> getPchSubs() {
		return this.pchSubs;
	}

	public void setPchSubs(Set<PchSub> pchSubs) {
		this.pchSubs = pchSubs;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "course")
	public Set<CourseCompetency> getCourseCompetencies() {
		return this.courseCompetencies;
	}

	public void setCourseCompetencies(Set<CourseCompetency> courseCompetencies) {
		this.courseCompetencies = courseCompetencies;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "course")
	public Set<Section> getSections() {
		return this.sections;
	}

	public void setSections(Set<Section> sections) {
		this.sections = sections;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "course")
	public Set<RecommendedSection> getRecommendedSections() {
		return this.recommendedSections;
	}

	public void setRecommendedSections(
			Set<RecommendedSection> recommendedSections) {
		this.recommendedSections = recommendedSections;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "course")
	public Set<StudentCourseHistory> getStudentCourseHistories() {
		return this.studentCourseHistories;
	}

	public void setStudentCourseHistories(
			Set<StudentCourseHistory> studentCourseHistories) {
		this.studentCourseHistories = studentCourseHistories;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "courseByPreReqCourseId")
	public Set<Requisite> getRequisitesForPreReqCourseId() {
		return this.requisitesForPreReqCourseId;
	}

	public void setRequisitesForPreReqCourseId(
			Set<Requisite> requisitesForPreReqCourseId) {
		this.requisitesForPreReqCourseId = requisitesForPreReqCourseId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "courseByCourseId")
	public Set<Requisite> getRequisitesForCourseId() {
		return this.requisitesForCourseId;
	}

	public void setRequisitesForCourseId(Set<Requisite> requisitesForCourseId) {
		this.requisitesForCourseId = requisitesForCourseId;
	}

}
